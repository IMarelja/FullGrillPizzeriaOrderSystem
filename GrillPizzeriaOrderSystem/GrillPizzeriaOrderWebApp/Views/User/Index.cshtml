@model ViewModels.UserViewModel
@using Microsoft.AspNetCore.Antiforgery
@using ModelConstants
@{
    ViewData["Title"] = "My Account";
}

<link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">

<div class="container mt-4">
    <div class="row g-4">
        <!-- User Info -->
        <div class="col-lg-7">
            <div class="card shadow-sm">
                <div class="card-header d-flex align-items-center">
                    <span class="material-icons-outlined me-2">person</span>
                    <h5 class="mb-0">My Info</h5>
                </div>
                <div class="card-body">
                    <form id="userInfoForm" asp-controller="User" asp-action="UpdateMe" method="post" novalidate>
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label for="Email" class="form-label">Email</label>
                            <input id="Email" name="Email" type="email" class="form-control" required maxlength="@ValidationConstants.EmailMaxLength" value="@Model.email" />
                            <div class="invalid-feedback">Please enter a valid email.</div>
                        </div>

                        <div class="mb-3">
                            <label for="FirstName" class="form-label">First Name</label>
                            <input id="FirstName" name="FirstName" type="text" class="form-control" required maxlength="@ValidationConstants.NameMaxLength" value="@Model.firstName" />
                            <div class="invalid-feedback">First name is required.</div>
                        </div>

                        <div class="mb-3">
                            <label for="LastName" class="form-label">Last Name</label>
                            <input id="LastName" name="LastName" type="text" class="form-control" required maxlength="@ValidationConstants.NameMaxLength" value="@Model.lastName" />
                            <div class="invalid-feedback">Last name is required.</div>
                        </div>

                        <div class="mb-3">
                            <label for="Phone" class="form-label">Phone</label>
                            <input id="Phone" name="Phone" type="tel" class="form-control" required maxlength="@ValidationConstants.PhoneMaxLength" value="@Model.phone" />
                            <div class="invalid-feedback">Please enter a valid phone number.</div>
                        </div>

                        <div class="d-flex gap-2">
                            <button id="btnSaveUser" type="submit" class="btn btn-primary">
                                <span class="material-icons-outlined align-middle me-1" style="font-size:18px">save</span>
                                Save Changes
                            </button>
                            <button id="btnResetUser" type="button" class="btn btn-light">
                                <span class="material-icons-outlined align-middle me-1" style="font-size:18px">restart_alt</span>
                                Reset
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Change Password -->
        <div class="col-lg-5">
            <div id="changePasswordPanel"
                 data-url="@Url.Action("ChangePassword", "Authentication")">
                @await Html.PartialAsync("~/Views/Authentication/_ChangePassword.cshtml", new AuthenticationResult())
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            const panel = document.getElementById('changePasswordPanel');

            function wireChangePasswordForm() {
                const form = panel.querySelector('#changePasswordForm');
                if (!form) return;

                form.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    // Optional: simple busy state
                    const submitBtn = form.querySelector('[type="submit"]');
                    const originalText = submitBtn ? submitBtn.innerHTML : null;
                    if (submitBtn) { submitBtn.disabled = true; submitBtn.innerText = 'Saving...'; }

                    try {
                        const url = form.action || panel.dataset.url;
                        const fd = new FormData(form);

                        // You can rely on the token in the form body (__RequestVerificationToken),
                        // but adding the header also works with [ValidateAntiForgeryToken].
                        const tokenEl = form.querySelector('input[name="__RequestVerificationToken"]');
                        const token = tokenEl ? tokenEl.value : null;

                        const resp = await fetch(url, {
                            method: 'POST',
                            body: fd,
                            headers: token ? { 'RequestVerificationToken': token } : {},
                            credentials: 'same-origin'
                        });

                        const html = await resp.text();
                        panel.innerHTML = html;   // replace partial content with server-rendered HTML
                        wireChangePasswordForm(); // re-bind events on the newly injected DOM
                    } catch (err) {
                        // Minimal fallback UI
                        const fallback = document.createElement('div');
                        fallback.className = 'alert alert-danger mt-2';
                        fallback.textContent = 'Unexpected error. Please try again.';
                        panel.appendChild(fallback);
                    } finally {
                        if (submitBtn && originalText !== null) {
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = originalText;
                        }
                    }
                });
            }

            // initial bind
            wireChangePasswordForm();
        })();
    </script>
}