@model ViewModels.FoodViewModel
@using Microsoft.AspNetCore.Antiforgery
@{
    ViewData["Title"] = "Edit food";
}


<div id="messageForFoodInfo" class="alert visually-hidden" role="alert"></div>

<div id="editDialog" class="p-4 rounded shadow-lg">
    <form id="formEditFood" method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <h3 class="mb-3">Edit Food Item (ID = @Model.id)</h3>

        <div class="mb-3">
            <label class="form-label" for="name">Name</label>
            <input id="name" name="name" class="form-control" value="@Model.name" />
        </div>

        <div class="mb-3">
            <label class="form-label" for="description">Description</label>
            <textarea id="description" name="description" class="form-control">@Model.description</textarea>
        </div>

        <!-- Add image upload field -->
        <div class="mb-3 position-relative">
            <label class="form-label" for="imageUpload">Food Image</label>
            <div class="position-relative">
                <input id="imageUpload" name="imageUpload" type="file"
                       accept=".jpg,.jpeg,.png,.gif" class="form-control pe-5"/>
                <!-- X button -->
                <button type="button" id="clearImageBtn"
                        class="btn btn-sm btn-outline-secondary position-absolute top-50 end-0 translate-middle-y me-2"
                        style="display:none;">
                    ✕
                </button>

                <!-- Undo button -->
                <button type="button" id="undoImageBtn"
                        class="btn btn-sm btn-outline-secondary position-absolute top-50 end-0 translate-middle-y me-5"
                        style="display:none;">
                    Undo
                </button>
            </div>
            <small class="form-text text-muted">
                Accepted formats: JPG, JPEG, PNG, GIF (Max: 5MB)
            </small>
            <small id="imageWarnings" class="text-danger"></small>
        </div>
        <!-- Preview container -->
        <div class="mb-3" id="imagePreviewContainer" style="display: none;">
            <label class="form-label">Preview</label>
            <div style="position: relative; display: inline-block;">
                <div id="defaultImageLabel" style="
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%) rotate(-45deg);
                    color: rgba(255, 255, 255, 0.8);
                    padding: 5px 10px;
                    border-radius: 4px;
                    font-weight: bold;
                    pointer-events: none;
                    z-index: 10;
                    font-size: 50px;
                ">
                    Default
                </div>
                <img id="imagePreview" src="#" class="img-thumbnail" style="max-width: 200px; max-height: 200px;" />
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label" for="price">Price</label>
            <input id="price" name="price" type="number" step="0.01" inputmode="decimal" class="form-control" value="@Model.price.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)" />
        </div>

        <div class="mb-3">
            <label class="form-label" for="foodCategorySelect">Select a category</label>
            <select id="foodCategorySelect" class="foodCategoryListDropdown form-select">
                <option value="0">Select a Category</option>
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Select Allergens</label>
            <div id="allergenCheckboxContainer"></div>
        </div>

        <button id="pushTheEditedFood" class="mb-3 btn btn-info">Edit food</button>
    </form>
</div>


@section Scripts {
    <script type="text/javascript">

        const $formEditFood = document.querySelectorAll('.editDialog');
        const $dropDownsFoodCategorySelected = document.querySelectorAll('.foodCategoryListDropdown');

        const messageBox = document.getElementById('messageForFoodInfo');

        const imagePreview = document.getElementById('imagePreview');
        const clearBtn = document.getElementById("clearImageBtn");
        let defaultSelectedImage = true;

        $(document).ready(async function () {
            try {
                await Promise.all([LoadFoodCategory(), LoadAllergens()]);

                await LoadCategoryFoodSelected()
                await LoadAllergensSelected();
                await LoadImageSelected();

                $('#foodCategorySelect').on('change', function () {
                    $('#editSelectFoodCategoryHiddenId').val($(this).val());
                });

                $("#pushTheEditedFood").click(function(e) {
                    e.preventDefault();
                    EditNewFood();
                });

                // Image logic

                $('#imageUpload').on('change', function () {
                    $('#imageWarnings').text('');
                    var file = this.files[0];

                    if (!file) {
                        $('#imagePreview').attr('src', '#');
                        $('#imagePreviewContainer').hide();
                        $('#clearImageBtn').hide();
                        $('#imageWarnings').text('Failed uploading file');
                        return;
                    }

                    // Allowed formats
                    var allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/jpg'];

                    // File size check (max 5MB)
                    if (file.size > 5 * 1024 * 1024) {
                        $('#clearImageBtn').hide();
                        $('#imageWarnings').text('File size exceeds 5MB limit');
                        return;
                    }

                    // File format check
                    if (!allowedTypes.includes(file.type)) {
                        $('#clearImageBtn').hide();
                        $('#imageWarnings').text('Invalid file format. Please upload JPG, PNG or GIF.');
                        return;
                    }

                    // Show image preview
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#imagePreview').attr('src', e.target.result);
                        $('#imagePreviewContainer').show();
                    };
                    reader.readAsDataURL(file);

                    var imagePath = "@Model.imagePath";
                    if(imagePath){
                        $('#undoImageBtn').show();
                        $('#defaultImageLabel').hide();
                    } else {
                        $('#undoImageBtn').hide();
                    }

                    // Show clear button
                    $('#clearImageBtn').show();
					defaultSelectedImage = false;
                });


                $('#clearImageBtn').on('click', function () {
                    $('#imageUpload').val('');
                    const el = document.getElementById('imageUpload');
                    if (el) el.value = "";
                    $('#imagePreview').attr('src', '#');
                    $('#imagePreviewContainer').hide();
                    $('#clearImageBtn').hide();
                    $('#imageWarnings').text('');
                    $('#defaultImageLabel').hide();

                    var imagePath = "@Model.imagePath";
                    if(imagePath){
                        $('#undoImageBtn').show();
                        defaultSelectedImage = false;

                    } else {
                        $('#undoImageBtn').hide();
					}
                });
                var imagePath = "@Model.imagePath";
                if (imagePath) {
                    $('#undoImageBtn').on('click', function () {
                        LoadImageSelected();
                        defaultSelectedImage = true;
                        $('#undoImageBtn').hide();
				    });
                }
            } catch (error) {
                showMessage("An error occurred during initialization.\n" + error + " Please try again later.", false);
            }
        });

        function LoadImageSelected(){
            var imagePath = "@Model.imagePath";
            if (imagePath) {
				defaultSelectedImage = true;
                $('#imageUpload').val('');
                const el = document.getElementById('imageUpload');
                if (el) el.value = "";
                $('#imagePreview').attr('src', imagePath);
                $('#imagePreviewContainer').show();
                $('#clearImageBtn').show();
                $('#defaultImageLabel').show();
            } else {
				defaultSelectedImage = false;
                $('#imagePreviewContainer').hide();
                $('#clearImageBtn').hide();
				$('#undoImageBtn').hide();
                $('#defaultImageLabel').hide();
            }
		}

        function LoadCategoryFoodSelected(){
            var valueCategory = "@Model.category.id";
            var exists = $(".foodCategoryListDropdown option[value='"+valueCategory+"']").length > 0;

            if (exists) {
                $('.foodCategoryListDropdown').val('@Model.category.id');
            } else {
				showMessage("The food category associated with this food item no longer exists. Please select a new category.", false);
                $('.foodCategoryListDropdown').val('0');
            }
        }

        function LoadAllergensSelected(){
            var selectedAllergenIds = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.allergens?.Select(a => a.id).ToList() ?? new List<int>()));

            selectedAllergenIds.forEach(function(id) {
                $(`#allergen_${id}`).prop('checked', true);
            });
		}

        function showMessage(text, isSuccess) {
            messageBox.classList.remove('visually-hidden', 'alert-success', 'alert-danger');
            messageBox.classList.add(isSuccess ? 'alert-success' : 'alert-danger');
            messageBox.textContent = text;
        }

        function LoadFoodCategory(){
            return $.ajax({
                type: "GET",
                url: '/FoodCategory/GetAll',
                dataType: "json",
                cache: true,
                success: function (response) {
                    if (response.success) {
                        var foodcategories = response.data;
                        console.log('FoodCategories loaded:', foodcategories);
                        renderFoodCategoryAsDropdown(foodcategories);
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, err) {
                    console.error('AJAX error:', status, err, 'HTTP:', xhr.status, 'Response:', xhr.responseText);
                    alert('AJAX: Error loading FoodCategories');
                }
            });
        }

        function renderFoodCategoryAsDropdown(foodcategories) {
            var html = '<option value="0">Select a Category</option>';
            foodcategories.forEach(function(foodcategory) {
                html += `<option value="${foodcategory.id}">${foodcategory.name}</option>`;
            });

            $dropDownsFoodCategorySelected.forEach(function(select) {
                select.innerHTML = html;
            });
        }

        function LoadAllergens(){
            return $.ajax({
                type: "GET",
                url: '/Allergen/GetAll',
                dataType: "json",
                cache: true,
                success: function (response) {
                    if (response.success) {
                        var allergen = response.data;
                        console.log('Allergen loaded:', allergen);
                        renderAllergenCheckBoxList(allergen);
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, err) {
                    console.error('AJAX error:', status, err, 'HTTP:', xhr.status, 'Response:', xhr.responseText);
                    alert('AJAX: Error loading FoodCategories');
                }
            });
        }

        function renderAllergenCheckBoxList(allergens) {
            var container = $("#allergenCheckboxContainer");
            container.empty();

            if (!allergens || allergens.length === 0) {
                container.append('<div class="text-muted">No allergens available</div>');
                return;
            }

            allergens.forEach(function (allergen) {
                var checkbox = `
                    <div class="form-check">
                        <input type="checkbox"
                               class="form-check-input"
                               name="allergenId"
                               value="${allergen.id}"
                               id="allergen_${allergen.id}">
                        <label class="form-check-label" for="allergen_${allergen.id}">
                            ${allergen.name}
                        </label>
                    </div>`;
                container.append(checkbox);
            });
        }

        function normalizePrice(v){
            if (typeof v !== 'string') v = String(v ?? '');
            return parseFloat(v.replace(',', '.'));
        }

        function EditNewFood(){
            // collect allergen ids
            const selectedAllergenIds = $('input[name="allergenId"]:checked')
                .map(function () { return parseInt(this.value); })
                .get();

            // already selected image path
			const imageKeep = defaultSelectedImage;
			const existingImagePath = "@Model.imagePath";

            // read the file correctly
            const fileInput = document.getElementById('imageUpload');
            const file = fileInput && fileInput.files ? fileInput.files[0] : null;

            // read category safely
            const selectedCategory = $('#foodCategorySelect').val();

            // payload fields (non-file)
            const name = $('#name').val()?.trim();
            const description = $('#description').val()?.trim();
            const price = normalizePrice($('#price').val());

            // basic validations
            if (!name || !description) {
                showMessage("Name and Description are required.", false);
                return;
            }
            if (!selectedCategory || selectedCategory === "0") {
                showMessage("Please select a valid Food Category.", false);
                return;
            }
            if (isNaN(price) || price <= 0) {
                showMessage("Please enter a valid positive price.", false);
                return;
            }

            // build FormData for multipart/form-data
            const fd = new FormData();
			fd.append('id', @Model.id);
            fd.append('name', name);
            fd.append('description', description);
            fd.append('price', price); // decimal will bind fine as string
            fd.append('foodCategoryId', parseInt(selectedCategory));
            fd.append('imagePath', existingImagePath);
            fd.append('defaultImageKeep', imageKeep); // whether to keep existing image or not

            // bind list of ints so ASP.NET Core model binder picks it up
            selectedAllergenIds.forEach((id, i) => fd.append(`allergenIds[${i}]`, id));

            if (file) {
                // name MUST match your view model property: IFormFile? ImageUpload
                fd.append('imageUpload', file);
            }

            $('#formEditFood').addClass("form-disabled");

            $.ajax({
                type: "POST",
                url: "/Food/Edit",
                data: fd,
                processData: false,     // don't stringify FormData
                contentType: false,     // let browser set multipart/form-data with boundary
                success: function (response) {
                    if (response?.success) {
                        showMessage(response.message || "Food edited.", true);
                    } else {
                        showMessage(response?.message || "Failed to edit food.", false);
                    }
                },
                error: function (xhr, status, err) {
                    console.error('AJAX error:', status, err, 'HTTP:', xhr.status, 'Response:', xhr.responseText);
                    try {
                        const r = JSON.parse(xhr.responseText);
                        if (r?.errors?.length) {
                            const allErrors = r.errors.map(e => (`${e.field}: ${e.errors.join(", ")}`).join("\n"));
                            showMessage(allErrors, false);
                        } else {
                            showMessage(r.message || "Validation failed.", false);
                        }
                    } catch {
                        showMessage("Unexpected error editing food.", false);
                    }
                },
                complete: function () {
                    // Re-enable form after request finishes
                    $('#formEditFood').removeClass("form-disabled");
                }
            });
        }


    </script>
}